#+TITLE: Dot file configuration
#+AUTHOR: Johnny Ruiz
#+EMAIL: jeko2000@yandex.com
#+DESCRIPTION: Personal dot configuration files
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:2 p:t

** Introduction
   This file leverages [[https://orgmode.org][org-mode]]'s [[https://orgmode.org/manual/Extracting-Source-Code.html][code export]] capabilities to construct
   dot configuration files I use in my systems with the exception of my
   my [[https://github.com/jeko2000/.emacs.d][emacs]] configuration which is tracked separately in the following
   repository:

   https://github.com/jeko2000/.emacs.d

*** Per-system configuration
    To support per-system configuration, we'll use the following utility
    function =tangle-to=.

    The following systems are supported:
    + gnu :: compiled for a GNU Hurd system.
    + gnu/linux :: compiled for a GNU/Linux system.
    + gnu/kfreebsd :: compiled for a GNU system with a FreeBSD kernel.
    + darwin :: compiled for Darwin (GNU-Darwin, macOS, ...).
    + ms-dos :: compiled as an MS-DOS application.
    + windows-nt :: compiled as a native W32 application.
    + cygwin :: compiled using the Cygwin library.

    #+begin_src emacs-lisp :exports none :results silent
(defun tangle-to (filename &rest system-types)
  "Return FILENAME when the value of `system-type' is present in SYSTEM-TYPES.
'If SYSTEM-TYPES is nil, then return FILENAME immediately."
  (check-type filename string)
  (if (or (null system-types) (member system-type system-types))
      filename
    'no))
    #+end_src

    A call to =org-babel-tangle= then writes the code blocks to the
    specific output files and *overwrites* any existing content.
** Applications
*** SBCL
    [[http://www.sbcl.org][SBCL]] is a high performance Common Lisp implementation.
    [[https://www.quicklisp.org/beta/][Quicklisp]] is the defacto Common Lisp library manager.
**** Common
     #+begin_src lisp (tangle-to "~/.sbclrc")
;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))
     #+end_src

*** Zsh
    The Z-Shell, `zsh' for short, is a command interpreter for UNIX systems.
    Per the [[http://zsh.sourceforge.net/Guide/zshguide02.html#l6][zsh user guide]], here's what to put where:

    + /etc/zlogin :: Run for login shells.
    + /etc/zprofile :: Run for login shells.
    + /etc/zshenv :: Always run for every zsh.
    + /etc/zshrc :: Run for interactive shells.

    + ~/.zlogin :: Run for login shells.
    + ~/.zprofile :: Run for login shells.
    + ~/.zshenv :: Usually run for every zsh (see below).
    + ~/.zshrc :: Run for interactive shells.
**** zshenv
***** MacOS
      Add [[https://www.macports.org][macports]] path variables.
      #+begin_src sh :tangle (tangle-to "~/.zshenv" 'darwin)
export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
export PATH="/opt/local/libexec/gnubin:$PATH"
      #+end_src

      Set [[https://openjdk.java.net][java]] home and add to path.
      #+begin_src sh :tangle (tangle-to "~/.zshenv" 'darwin)
JAVA11_HOME=/Library/Java/JavaVirtualMachines/openjdk11/Contents/Home
JAVA8_HOME=/Library/Java/JavaVirtualMachines/openjdk8/Contents/Home
export JAVA_HOME="$JAVA8_HOME"
      #+end_src
***** Common
      Add ~/bin to the path in all systems.
      #+begin_src sh :tangle (tangle-to "~/.zshenv")
export PATH="$HOME/bin:$PATH"
      #+end_src
**** zshrc
***** Common
      #+begin_src sh :tangle (tangle-to "~/.zshrc")
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="strug"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    colored-man-pages
    colorize
    cp
    pass
    ant
    git
    gnu-utils
    lein
    mvn
    node
    npm
    pip
    pyenv
    virtualenv
    macports
    osx
    themes)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
setopt histignorealldups sharehistory
bindkey -e
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

autoload -Uz compinit
compinit
      #+end_src
